Saahil Claypool & Josh Desmond


Identify three features of Lisp that Graham believes gave his company a competitive advantage. At least two should be technical (rather than social). Describe each feature and explain how it provided an advantage.

1.) The macro system in Lisp is a way of programatically expanding patterns of lisp code into more lisp code (in a custom defined manner), delaying its execution. The system of writing macros is written in Lisp, however, which makes it unlike other macro systems. This provided an advantage, because when coding his program, Graham claimed that, "at least 20-25% of the code in this program is doing things that you can't easily do in any other language". Rather, macros allowed for far shorter development cycles because it was easier to do things.
2.) Graham writes that, "Lisp code is made out of Lisp data objects," and that this syntatical feature of the language is important, because it closely aligns lisp code to the structure of a parse tree. Because of that, you can programatically modify your source code; or rather, in his words, write "programs that write programs" using macros. This again provided an advantage by making it easier and faster to extend/build on his program and release patches faster.
3.) Competitors don't use or understand Lisp. This aspect of the language provided Graham an advantage over competitors because it meant they were unable to copy him as well. If a feature was realesed that was designed to work well with Lisp, others' wouldn't have the advantage of being able to quickly develop the feature.

Graham's article makes several observations about programming and programming languages. Identify and restate in your own words, the two observations that you find most significant. Explain (in a couple of sentences each) why you find each of your chosen observations significant.

1.) Programming languages have different levels of power, where power is a spectrum of how easily (assuming you know the language) one can code things in certain languages. This idea is distinct from defining high level and low level languages, however. I find this idea pretty significant in that it clashes with a fairly common idea, that which language you use doesn't really matter because you can basically always code anything in any language. While the reasoning is true, it doesn't validate the idea that language choice doesn't matter. Because technically you could probably code just about everything in assembly, but that you shouldn't because there are programming languages that will do a lot of the stuff you need for you. 
2.) The popularity of programming languages changes really slowly, and its largely because people get attached to their languages of choice. This bit of knowledge opens my eyes to the danger of getting attached to a language that isn't powerful, but neglecting change only because I am used to coding in what I already have. With the knowledge that programming popularity doesn't necesarilly reflect a language's power, I feel like I should throughout my life keep up to date on what languages other people are raving about.

In another interesting article, Graham shares his early critique of Java. It turns out that Graham was somewhat wrong in predicting the future of Java, but his analysis of the non-technical aspects of a programming language is applicable to any new language that comes on the scene. Read the article and in your own words, state three questions that Graham's article teaches you to ask when approaching a new language.

1.) Is the language designed for other people, or is it a language that is designed for the creators' use? That is, what motivation did the language designers have when they built it?
2.) Is the language too controlling, taking away freedom from the programmer at the expense of the language's power? (Is the language intentionally made to be safe, so people can't mess up systems when they make mistakes?)
3.) Does the language have a passionate community behind it? Or are people using simply because its a job requirement?

Languages are everywhere once you get used to looking for them. In general, a language is the repository of knowledge and goals that emerge from a domain of human activity. Computer science is replete with such examples (optimization problems led to OPL, database query optimization gave rise to SQL, scripting needs brought forth Awk and Perl, and so on). But humans have done this for much longer than computers have been around.

-- Identify a non computer-science "language" used for some activity by some subset of humans.

A tournament bracket for sports. This can range from simple single elimation tournaments to seeded multiple elimination tournaments with group stages.

-- Explain the community of people and what they share.

The community that uses tournament brackets are sports fans and officials. This group is intersted in knowing both the structure of how future games should be played and the past results of the games.

-- Now, evaluate this language as you would a programming language by answering the following questions:
-- What are programs in this language?

'Programs' would consist of a list of teams that are in the tournament as well as an additional set of rules, such as how teams are seeded and or eliminated. 

-- What are the data, the operations and the control? (make sure your chosen language has all of these characteristics --- if not, pick something else!)

The data includes teams, matches, and additional (optional) rules. The Bracket structure is set up much like a tree: each match in a brakcet is between the winners of two other matches. This creates a tree-like structure.
The operations include executing matches/playing games, and assigning teams to seeded positions in the bracket. 
Control in this language would take the form in different branches to the team depending on which team wins each game. 

-- Briefly describe the language's syntax; use examples if you wish.

To represent the execution of a tournament bracket, people often use the branching tree diagram showing the progress of matches towards the finals. 
This diagram shows which two teams play at which stages of the tournament, and shows which teams win each match (often showing their "score" as well).
This common convention serves as the syntax for creating visual trees. 

The execution statements are specifying matches to be played, and building the tournament tree after games are played.

An example in words of a match (with its conditional branches) within a tournament is:
WPI plays MIT in a best of three in the semi-finals. The winner of the match moves onto the finals. The loser of the match plays in the third place game.

And a complicated example of a tournament is the World Cup in soccer:
Teams are seeded into one of eight group stage brackets, according to the following seeding rules: Each group gets one elite team, (defined as one of the top seven or eight FIFA ranked teams and the host country), and one team from each of the three other geographical groups.
There is then a round robin stage, where the top two teams from each group advance into the bracket stage, according to the scoring system that a win is three points, a tie is one point, and a loss is zero points.
The bracket is then completed with best of ones, with ties being handled via two overtimes and a penalty shoot-out. A third place match is played before the World Cup finals.

-- What "data values" do programs in this language evaluate to?

The programs would evaluate to a list of teams by ranking, or a filled out/completed bracket showing the scores/performances of each team.

-- What is the corresponding notion of an interpreter for your language?

A sameple interpreter would be an avid basketball fan. A fan who is trying to determine just how good his team did will interpret a bracket to see how far his team made it in the bracket and see how well his team did relative to the other teams in the tournament. 

-- Comment on whether or not this language might be amenable to computer processing (you do not need to choose a language that can be machine-processed).

Yes. Software exists to specify tournaments. Additionally, an algorithim could be written to 'flatten' a bracket and create a ranked list of how well each team in the bracket did. This could look at both what round the team made it to as well as the relative strength of the team that finally eliminated that each team. 